/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import { useGLTF, Html } from "@react-three/drei";
import { GroupProps } from "@react-three/fiber";
import { useState } from "react";

enum SoilType {
	Lower = "Lower",
	Upper = "Upper",
}

interface SoilLayersProps extends GroupProps {
	// You can add any additional props here if needed
	onHover: (payload: { [key: string]: string }) => void;
}

export function SoilLayers(props: SoilLayersProps) {
	const { nodes, materials } = useGLTF("/tssting.glb");
	const [soil, setSoil] = useState<SoilType | null>(null);
	const [tipPosition, setTipPosition] = useState<{
		x: number;
		y: number;
		z: number;
	}>({ x: 0, y: 0, z: 0 });
	const [showTip, setShowTip] = useState(false);
	// Handlers
	const handleClick = (soil: SoilType) => {
		setSoil(soil);
	};

	const handleHover = (event: any, soilType: SoilType) => {
		console.log("Hovering over Upper mesh");
		event.stopPropagation(); // Prevents the event from bubbling up
		document.body.style.cursor = "pointer"; // Change cursor to pointer
		console.log(event.point);
		setSoil(soilType);
		setTipPosition({
			x: event.point.x / 2.5,
			y: event.point.y,
			z: event.point.z,
		});
		setShowTip(true);
		/* props.onHover({
			soil: soil ?? "",
			point: event.point,
		}); */
	};

	const handlePointerOut = () => {
		document.body.style.cursor = "auto"; // Reset cursor when not hovering
		setShowTip(false);
	};

	return (
		<group {...props} dispose={null}>
			<Html wrapperClass="div" position={[0, 2.5, 0]} center>
				<h1 style={styles.question}>
					¿Cúal capa es la que se afecta durante la erosión?
				</h1>
			</Html>
			<group position={[1, 1.066, 0]} scale={[5.579, 1.797, 1.797]}>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.Lower.geometry}
					material={materials.Material}
					position={[0.065, -0.593, -0.155]}
					scale={[0.179, 0.386, 0.557]}
					onPointerEnter={(event) => handleHover(event, SoilType.Lower)} // Hover event for Lower mesh
					onPointerOut={handlePointerOut} // Optional: Hover out event
					onClick={() => handleClick(SoilType.Lower)}
				/>
				<mesh
					castShadow
					receiveShadow
					geometry={nodes.upper.geometry}
					material={materials.Material}
					position={[0.07, -0.593, -0.155]}
					scale={[0.179, 0.557, 0.557]}
					onPointerEnter={(event) => handleHover(event, SoilType.Upper)}
					onPointerOut={handlePointerOut}
					onClick={() => handleClick(SoilType.Upper)}
				/>
			</group>
			{showTip && (
				<Html wrapperClass="div" position={[tipPosition.x, tipPosition.y, 0]}>
					<div style={styles.container}>Capa superior</div>
				</Html>
			)}
		</group>
	);
}

const styles = {
	container: {
		width: "300px",
		height: "auto",
		backgroundColor: "rgba(0, 0, 0, 0.75)",
		borderRadius: "8px",
		overflow: "hidden",
		position: "relative",
		padding: "16px",
	},
	question: {
		fontSize: "1.75rem",
		color: "black",
		width: "1000px",
		fontEeight: "bold",
	},
};

useGLTF.preload("/tssting.glb");
